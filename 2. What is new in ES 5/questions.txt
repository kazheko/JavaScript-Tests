Es5 strict vs Es5 default

1. 	
	x = 5;
	"use strict";
	console.log(x);

	a. 5
	b. undefined
	c. ReferenceError

2. 	
	"use strict";
	x = 5;
	console.log(x);

	a. 5
	b. undefined
	c. ReferenceError

3. 	
	function sum(a, a, c) {
	  return a + a + c;
	}
	console.log(sum(1,2,3));

	a. 6
	b. 7
	c. SyntaxError

4. 
	function sum(a, a, c) {
	  "use strict";
	  return a + a + c;
	}
	console.log(sum(1,2,3));

	a. 6
	b. 7
	c. SyntaxError

Trailling commas

1. 
	var arr = [1, 2, 3,,];
	console.log(arr.length);

	a. 3
	b. 4
	c. SyntaxError

2. 
	var obj = {a: 1, b: 2, c: 3,,}
	var properties = Object.keys(obj);
	console.log(properties.length);

	a. 3
	b. 4
	c. SyntaxError

Reserved words relaxation

1. 
	var return = 9;
	console.log(return);

	a. 9
	b. SyntaxError

2. 
	var obj = {
		return: true
	};
	console.log(obj.return);

	a. true
	b. SyntaxError

Getters/setters

1. 
	var language = {
	  set current(name) {
	    this.log.push(name);
	  },
	  get logCount(){
	  	return this.log.length;
	  },
	  log: []
	}

	language.current = 'EN';
	language.current = 'FA';

	console.log(language.logCount);

	a. undefined
	b. 0
	c. 2

2. 
	var language = {
		val: 'EN',
		get Current() {
			delete this.val;
			return this.val;
		}
	}
	console.log(language.Current);

	a. undefined
	b. EN
	c. ReferenceError

Multiline string literals

1. 
	var long_line = "This is a \ long line"; 

	console.log(long_line);

	a. This is a \ long line
	b. This is a  long line
	c. This is a long line

2. 
	var long_line = "This is a \
	long line"; 

	console.log(long_line);

	a. This is a \ long line
	b. This is a  long line
	c. This is a long line
	d. This is a
	   long line

3. 
	var long_line = "This is a \[whitespace]
	long line"; 

	console.log(long_line);

	a. This is a \ long line
	b. This is a  long line
	c. This is a long line
	d. This is a
	   long line
	e. SyntaxError

Constants

1. 
	var i = 3;
	const c = 3;
	console.log(window.i + window.c);

	a.6
	b.undefined
	c.NaN

2. 
	const f = function(a){ return a*a; };
	console.log(f(2));

	a. SyntaxError
	b. 4
	c. 2

3.
	const obj = {
		prop1: '1'
	};
	obj.prop1 = '2';
	console.log(obj.prop1);

	a. 1
	b. 2
	c. TypeError

parseInt optional radix

1.
	var val = parseInt("0xF", 16);
	console.log(val);

	a. 16
	b. 10
	c. 15

2.
	var val = parseInt(021, 8);
	console.log(val);

	a. 17
	b. 21
	c. 15

Replacing Object or Array does not change the behavior of {} or [].

JSON.parse and JSON.stringify

1.
	var json = '{"a": 5, "b": "true", "c": null}';
	var obj = JSON.parse(json);
	console.log(obj);

	a. {a: 5, b: true, c: null}
	b. {a: '5', b: 'true', c: 'null'}
	c. {a: 5, b: 'true', c: null}

2.
	var json = JSON.stringify([1, 'false', false]);
	console.log(json);

	a. '[1, "false", false]'
	b. '["1", "false", "false"]'
	c. SyntaxError


Function: bind

1.
	var obj = {
		x: 5,
		showMeX: function(){ console.log(this.x); }
	};
	obj.x = 7;
	var showMeX = obj.showMeX;
	showMeX();

	a. 5
	b. 7
	c. undefined

2.
	var obj = {
		x: 5	
	};
	var showMeX = function(){ console.log(this.x); }
	var x = 7;
	var boundedShowMeX = showMeX.bind(obj);
	boundedShowMeX();

	a. 5
	b. 7
	c. undefined

3.
	var showMeX = function(){ console.log(this.x); }
	var boundedShowMeX = showMeX.bind({x: 5}).bind({x: 7});
	boundedShowMeX();

	a. 5
	b. 7
	c. undefined

4.
	var showMeX = function(){ console.log(this.x); }
	showMeX.propY = 7;
	var boundedShowMeX = showMeX.bind({x: 5});
	console.log(boundedShowMeX.propY);

	a. 5
	b. 7
	c. undefined